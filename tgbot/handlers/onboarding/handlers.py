import datetime
import time

from django.utils import timezone
from telegram import Bot, ParseMode, Update
from telegram.ext import CallbackContext
from traitlets import Float

from tgbot.handlers.onboarding import static_text, static_state
from tgbot.handlers.utils.info import extract_user_data_from_update, generate_qr
from tgbot.models import User, History
from tgbot.handlers.onboarding.keyboards import *

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –≤ —Å–ª—É—á–∞–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.


def status_handler_func(update: Update, context: CallbackContext):
    print('status_handler_func', update)
    # if hasattr(update, 'message') and update.message != None:
        # if update.message.chat.id == -1001793015412:
            # User.set_ref_user(update, context)

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def message_handler_func(update: Update, context: CallbackContext):
    print('message_handler_func', update)
    if hasattr(update, 'message') and update.message != None:
        u = User.get_user(update, context)
        if update.message.chat.id != -1001793015412:
            if u.state in State_Dict:
                func_menu = State_Dict[u.state]
                func_menu(update, context)
            elif update.message.text in Menu_Dict:  # button_message –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–µ
                func_menu = Menu_Dict[update.message.text]
                func_menu(update, context)
            else:
                del_mes(update, context)


def callback_inline(update: Update, context: CallbackContext):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    # print('callback_inline', update)
    call_list = [''
                 ]
    call = update.callback_query
    if call.message:
        call_func = call.data.split(' ')
        if len(call_func) > 1:
            if call_func[0] in call_list:
                func_menu = Menu_Dict[call_func[0]]
                func_menu(update, context, call_func[1])
        else:
            func_menu = Menu_Dict[call.data]
            func_menu(update, context)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    # elif call.inline_message_id:
    #	func_menu = Menu_Dict[call.data]
    #	func_menu(call, context)

# –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π


# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è—é—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–¥–µ–ª–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏) –∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ States.S_MENU(–≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å=1)
def del_mes(update: Update, context: CallbackContext, bot_msg: bool = False):
    message = get_message_bot(update)
    try:
        context.bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    if bot_msg:
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-1)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-2)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-3)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-4)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-5)
        except:
            pass
        # time.sleep(0.1)
        try:
            context.bot.delete_message(
                message.chat.id, int(message.message_id)-6)
        except:
            pass

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º message


def get_message_bot(update):
    if hasattr(update, 'message') and update.message != None:
        message = update.message
    if hasattr(update, 'callback_query') and update.callback_query != None:
        message = update.callback_query.message
    return message

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ float


def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False

#{'user': {'id': 1821543506, 'last_name': '–ê–±—Ä–∞–º–æ–≤–∞', 'is_bot': False, 'first_name': '–ê–ª–ª–∞', 'language_code': 'ru', 'username': 'abralalalaa'}, 'status': 'left', 'until_date': None}

def check_in(update: Update, context: CallbackContext, chat_id: int|str = -1001606481866):
    message = get_message_bot(update)
    u = User.get_user(update, context)
    check_in_user = context.bot.get_chat_member(chat_id=chat_id, user_id=u.user_id)
    print(check_in_user)
    if hasattr(check_in_user, 'status') and (check_in_user.status == 'left' or check_in_user.status == 'kicked'):# 'left' 'member' 'kicked'
        u.state = static_state.S_CHECK_IN
        id = context.bot.send_message(message.chat.id, static_text.NOT_CHACK_IN, reply_markup=make_keyboard_for_check_in())  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        u.message_id = id.message_id
        u.save()
        return False
    return True


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username


def check_username(update: Update, context: CallbackContext, text='\n'):
    message = get_message_bot(update)
    if not hasattr(message.chat, 'username') or message.chat.username == '' or message.chat.username == None:
        u = User.get_user(update, context)
        u.state = static_state.S_USERNAME
        id = context.bot.send_message(message.chat.id, static_text.NOT_USER_NAME.format(
            text=text, tgid=message.chat.id), reply_markup=make_keyboard_for_check_in())  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        u.message_id = id.message_id
        u.save()
        return False
    return True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ email
def change_email(update: Update, context: CallbackContext, text='\n'):
    message = get_message_bot(update)
    u, _ = User.get_user_and_created(update, context)
    u.state = static_state.S_EMAIL
    id = context.bot.send_message(message.chat.id, static_text.NOT_EMAIL_NAME.format(
        text=text, tgid=message.chat.id), reply_markup=make_keyboard_for_check_username())  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
    u.message_id = id.message_id
    u.save()
    del_mes(update, context, True)

def check_email(update: Update, context: CallbackContext, text='\n'):
    message = get_message_bot(update)
    u, _ = User.get_user_and_created(update, context)
    if u.email == '' or u.email == None:
        u = User.get_user(update, context)
        u.state = static_state.S_EMAIL
        id = context.bot.send_message(message.chat.id, static_text.NOT_EMAIL_NAME.format(
            text=text, tgid=message.chat.id), reply_markup=make_keyboard_for_check_username())  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        u.message_id = id.message_id
        u.save()
        return False
    return True

def s_email(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    email = message.text
    try:
        u.email = email
        u.state = static_state.S_MENU
        u.save()
    except:
        del_mes(update, context, True)
        return check_email(update, context)
    cmd_wallet(update, context)
# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞


def command_start(update: Update, context: CallbackContext):
    u, _ = User.get_user_and_created(update, context)
    message = get_message_bot(update)
    # if check_in(update, context):
        # if u.state == static_state.S_ACCEPTED_ORDER:
        #     cmd_accepted_order_show(update, context)
        #     return
        # if u.state == static_state.S_USERNAME:
        #     cmd_wallet(update, context)
        #     del_mes(update, context, True)
        #     return
    text = '\n'
    u.state = static_state.S_MENU
    id = context.bot.send_message(message.chat.id, static_text.START_USER.format(
        text=text, tgid=message.chat.id), reply_markup=make_keyboard_for_start(), parse_mode="HTML")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
    u.message_id = id.message_id
    u.save()
    del_mes(update, context, True)

    # if created:
    #     text = static_text.start_created.format(first_name=u.first_name)
    # else:
    #     text = static_text.start_not_created.format(first_name=u.first_name)

    # update.message.reply_text(text=text, reply_markup=make_keyboard_for_start_command())


# –ú–µ–Ω—é


def cmd_menu(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    if check_in(update, context):
        # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        u.state = static_state.S_MENU
        id = context.bot.send_message(
            message.chat.id, static_text.MENU, reply_markup=make_keyboard_for_cmd_menu(u.is_admin), parse_mode="HTML")
        u.message_id = id.message_id
        u.save()
    del_mes(update, context, True)


# –ö–æ—à–µ–ª–µ–∫

def cmd_wallet(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
    # print(bot.get_chat_member(352482305))
    # if check_email(update, context):
    if check_in(update, context):
        u.state = static_state.S_MENU
        text_email = ''
        if u.email != None and u.email != '':
            text_email = 'üì® –ü–æ—á—Ç–∞: '+u.email
        id = context.bot.send_photo(
            chat_id=message.chat.id, photo=open('dtb/media/photo_2022-06-23_23-23-23.jpg', 'rb'), caption=static_text.WALLET.format(balance=u.balance, balance_withdrawal=u.balance_withdrawal, total_profit=u.total_profit), reply_markup=make_keyboard_for_cmd_wallet(text_email), parse_mode="HTML")
        u.message_id = id.message_id
        u.save()
    del_mes(update, context, True)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è USDT TRC20 

def cmd_top_up_wallet_usdt(update: Update, context: CallbackContext):
    u = User.set_user_addr(update, context)
    message = get_message_bot(update)
    # if check_username(update, context):
        # if check_email(update, context):
    if check_in(update, context):
        id = context.bot.send_photo(
            chat_id=message.chat.id, photo=generate_qr(u.addr).getvalue(), caption=static_text.WALLET_ADDR.format(addr=u.addr), reply_markup=make_keyboard_for_cmd_top_up_wallet_usdt(), parse_mode="HTML")
        #context.bot.send_message( message.chat.id, static_text.WALLET_ADDR.format(addr=u.addr), reply_markup=make_keyboard_for_cmd_top_up_wallet_usdt(), parse_mode="HTML")
        u.message_id = id.message_id
        u.save()
    del_mes(update, context, True)

# –ö–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∞ USDT TRC20 

def cmd_withdraw_wallet_usdt(update: Update, context: CallbackContext):
    u = User.set_user_addr(update, context)
    message = get_message_bot(update)
    # if check_username(update, context):
        # if check_email(update, context):
    if check_in(update, context):
        u.state = static_state.S_WALLET_WITHDRAW
        id = context.bot.send_message(
            message.chat.id, static_text.WALLET_WITHDRAW.format(summ=u.balance_withdrawal), reply_markup=make_keyboard_for_cmd_help(), parse_mode="HTML")
        u.message_id = id.message_id
        u.save()
    del_mes(update, context, True)

def s_withdraw_wallet_usdt(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    wallet = message.text
    if u.balance_withdrawal > 0:
        context.bot.send_message(
            chat_id=2076920918, text=static_text.WALLET_WITHDRAW_SEND.format(username=u.username, first_name=u.first_name, last_name=u.last_name, wallet=wallet, summ=u.balance_withdrawal), parse_mode="HTML")
        time.sleep(0.5)
        text = static_text.WALLET_WITHDRAW_TEXT.format(wallet=wallet, summ=u.balance_withdrawal)
        id = context.bot.send_message(
                chat_id = message.chat.id, text=text, reply_markup=make_keyboard_for_cmd_help(), parse_mode="HTML")
        u.message_id = id.message_id
        u.balance_withdrawal = 0
        u.save()
        History.objects.create(timestamp=int(datetime.datetime.today().timestamp()), comment=text, user_id=u)
    else:
        id = context.bot.send_message(
                    message.chat.id, "–ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", reply_markup=make_keyboard_for_cmd_help(), parse_mode="HTML")
        u.save()
    del_mes(update, context, True)

# –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ USDT TRC20 

def cmd_deactivate_invest_usdt(update: Update, context: CallbackContext):
    u = User.set_user_addr(update, context)
    message = get_message_bot(update)
    # if check_username(update, context):
        # if check_email(update, context):
    if check_in(update, context):
        u.state = static_state.S_DEACTIVATE_INVEST
        id = context.bot.send_message(
            message.chat.id, static_text.DEACTIVATE_INVEST.format(summ=u.balance), reply_markup=make_keyboard_for_cmd_help(), parse_mode="HTML")
        u.message_id = id.message_id
        u.save()
    del_mes(update, context, True)

def s_deactivate_invest_usdt(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    wallet = message.text
    if u.balance > 0:
        context.bot.send_message(
            2076920918, static_text.DEACTIVATE_INVEST_SEND.format(username=u.username, first_name=u.first_name, last_name=u.last_name, wallet=wallet, summ=u.balance), parse_mode="HTML")
        text = static_text.DEACTIVATE_INVEST_TEXT.format(wallet=wallet, summ=u.balance)
        id = context.bot.send_message(
                message.chat.id, text=text, reply_markup=make_keyboard_for_cmd_help(), parse_mode="HTML")
        u.message_id = id.message_id
        u.balance = 0
        u.save()
        History.objects.create(timestamp=int(datetime.datetime.today().timestamp()), comment=text, user_id=u)
    else:
        id = context.bot.send_message(
                    message.chat.id, "–ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", reply_markup=make_keyboard_for_cmd_help(), parse_mode="HTML")
        u.save()   
    del_mes(update, context, True)


# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
def cmd_referal(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
    # print(bot.get_chat_member(352482305))
    # if check_email(update, context):
    if u.balance >= 1000:
        status_1 = '‚úÖ'
    else:
        status_1 = '‚ùå'
    
    if u.balance >= 2000:
        status_2 = '‚úÖ'
    else:
        status_2 = '‚ùå'

    if u.balance >= 3000:
        status_3 = '‚úÖ'
    else:
        status_3 = '‚ùå'

    if check_in(update, context):
        u.state = static_state.S_MENU
        # ///// to do
        id = context.bot.send_photo(
            chat_id=message.chat.id, photo=open('dtb/media/photo_2022-07-04_17-34-21.jpg', 'rb'),
                caption=static_text.REFERAL.format(
                    ref_user_id=u.user_id,
                    status_1=status_1,
                    status_2=status_2,
                    status_3=status_3,

                    count_ref_1=u.count_ref_1,
                    funds_raised_ref_1=u.funds_raised_ref_1,
                    reward_ref_1=u.reward_ref_1,

                    count_ref_2=u.count_ref_2,
                    funds_raised_ref_2=u.funds_raised_ref_2,
                    reward_ref_2=u.reward_ref_2,

                    count_ref_3=u.count_ref_3,
                    funds_raised_ref_3=u.funds_raised_ref_3,
                    reward_ref_3=u.reward_ref_3

                    ),
                reply_markup=make_keyboard_for_cmd_help(),
                parse_mode="HTML")
        u.message_id = id.message_id
        u.save()
    del_mes(update, context, True)

#FAQ

def cmd_faq(update: Update, context: CallbackContext, text: str = ''):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    u.state = static_state.S_MENU
    if text == '':
        text = static_text.FAQ
    id = context.bot.send_photo(
            chat_id=message.chat.id, photo=open('dtb/media/photo_2022-07-04_16-44-00.jpg', 'rb'), caption=text, reply_markup=make_keyboard_for_cmd_faq(), parse_mode="HTML")
    u.message_id = id.message_id
    u.save()
    del_mes(update, context, True)

def cmd_1(update: Update, context: CallbackContext):
    cmd_faq(update, context, static_text.TEXT1)
def cmd_2(update: Update, context: CallbackContext):
    cmd_faq(update, context, static_text.TEXT2)
def cmd_3(update: Update, context: CallbackContext):
    cmd_faq(update, context, static_text.TEXT3)
def cmd_4(update: Update, context: CallbackContext):
    cmd_faq(update, context, static_text.TEXT4)
def cmd_5(update: Update, context: CallbackContext):
    cmd_faq(update, context, static_text.TEXT5)
def cmd_6(update: Update, context: CallbackContext):
    cmd_faq(update, context, static_text.TEXT6)

# –ò—Å—Ç–æ—Ä–∏—è

def history(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    u.state = static_state.S_MENU
    history = u.history_set.all().order_by('timestamp').reverse()
    text = '–ò—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–∫–∞ –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è'
    if len(history) >= 1:
        tt = ''
        list_text = ''
        for i in history:
            ts = i.created_at.strftime('%Y-%m-%d %H:%M:%S')
            list_text = '{date} {comment}\n\n'.format(date=ts, comment=i.comment)
            if len(tt+list_text) > 4096:
                context.bot.send_message(
                    message.chat.id, tt, parse_mode="HTML")
                tt = list_text
            else:
                tt += list_text
            time.sleep(0.2)
        context.bot.send_message(
            message.chat.id, tt, parse_mode="HTML")
        text = """
–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –Ω—É–ª–µ–≤–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.
–ü—Ä–∏–º–µ—Ä: 
    –ï—Å–ª–∏ —É —Ç–µ–±—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å GMT+3, 
    —Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–±–∞–≤–∏—Ç—å 3 —á–∞—Å–∞ 
    –∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏.
"""
    time.sleep(0.1)
    id = context.bot.send_message(
        message.chat.id, text, reply_markup=make_keyboard_for_cmd_help(), parse_mode="HTML")
    u.message_id = id.message_id
    u.save()
    del_mes(update, context, True)



###################################
###################################
def cmd_help(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    message = get_message_bot(update)
    id = context.bot.send_message(
        message.chat.id, static_text.HELP,
        reply_markup=make_keyboard_for_cmd_help(), parse_mode="HTML", disable_web_page_preview=True)
    u.message_id = id.message_id
    u.save()
    del_mes(update, context, True)


def cmd_admin(update: Update, context: CallbackContext):
    u = User.get_user(update, context)
    if u.is_admin:
        message = get_message_bot(update)
        id = context.bot.send_message(message.chat.id, static_text.ADMIN_MENU_TEXT.format(
            context.bot.get_chat_member(chat_id=-1001793015412, user_id=u.user_id)), reply_markup=make_keyboard_for_cmd_admin(), parse_mode="HTML")
        u.message_id = id.message_id
        u.save()
        del_mes(update, context, True)
    else:
        command_start(update, context)


def cmd_pass():
    pass


# —Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –ú–µ–Ω—é –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
State_Dict = {
    # –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–æ –ú–µ–Ω—é, –º—ã –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —É–¥–∞–ª—è–µ—Ç—Å—è
    static_state.S_MENU: del_mes,
    static_state.S_EMAIL: s_email,
    static_state.S_WALLET_WITHDRAW: s_withdraw_wallet_usdt,
    static_state.S_DEACTIVATE_INVEST: s_deactivate_invest_usdt,
}

# —Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –ú–µ–Ω—é
Menu_Dict = {
    '–°—Ç–∞—Ä—Ç': command_start,
    '–ú–µ–Ω—é': cmd_menu,
    '–ö–æ—à–µ–ª–µ–∫': cmd_wallet,
    '–ü–æ—á—Ç–∞': change_email,
    '–ü–æ–ø–æ–ª–Ω–∏—Ç—å_–ö–æ—à–µ–ª–µ–∫_TRC20':cmd_top_up_wallet_usdt,
    '–í—ã–≤–µ—Å—Ç–∏': cmd_withdraw_wallet_usdt,
    '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å': cmd_deactivate_invest_usdt,
    '–†–µ—Ñ–µ—Ä–∞–ª–∫–∞':cmd_referal,
    'FAQ':cmd_faq,
    '1Ô∏è‚É£':cmd_1,
    '2Ô∏è‚É£':cmd_2,
    '3Ô∏è‚É£':cmd_3,
    '4Ô∏è‚É£':cmd_4,
    '5Ô∏è‚É£':cmd_5,
    '6Ô∏è‚É£':cmd_6,
    '–ò—Å—Ç–æ—Ä–∏—è': history,
    '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ': cmd_admin,
    'pass': cmd_pass,
    'Help': cmd_help,
}


def secret_level(update: Update, context: CallbackContext) -> None:
    # callback_data: SECRET_LEVEL_BUTTON variable from manage_data.py
    """ Pressed 'secret_level_button_text' after /start command"""
    user_id = extract_user_data_from_update(update)['user_id']
    text = static_text.unlock_secret_room.format(
        user_count=User.objects.count(),
        active_24=User.objects.filter(
            updated_at__gte=timezone.now() - datetime.timedelta(hours=24)).count()
    )

    context.bot.edit_message_text(
        text=text,
        chat_id=user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )
